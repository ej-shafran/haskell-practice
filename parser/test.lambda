def identity = \x -> x
def self_apply = \s -> (s s)
def apply = \func -> \arg -> (func arg)

def true = \first -> \_ -> first
def false = \_ -> \second -> second

# the way to write
# x ? a : b
# is
# (((cond a) b) x)
def cond = \e1 -> \e2 -> \c -> ((c e1) e2)

def not = \x -> ((x false) true)

# the way to write
# a && b
# is
# ((and a) b)
def and = \a -> \b -> ((a b) false)

((and true) false)
